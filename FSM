//Outline of FSM. Please change as need fit.

module fsm(clk, rst, x, y)
input clk, rst, x;
output          y;
reg             y;
reg [1:0]  cs, ns;

parameter
  s0 = 1'b0;   //Reset state
  s1 = 1'b0;   // write enable state
  s2 = 1'b0;  //  ready state
  s3 = 1'b0;  //  init state
  s4 = 1'b0; // Send State
  s5 = 1'b0; // Clear State

always @ (cs)
begin
  case(cs)
    s0: y = 0;
    s1: y = 0;
    s2: y = 0;
    s3: y = 0;
    s4: y = 0;
    s5: y = 0;
    default y = 0;
  endcase
 end
 
 always @ (cs or x)
 begin
  case(cs)
    s0: if(x) ns = s1: //enable write
        else  ns = s0; //remain in reset state
        
    s1: if(x) ns = s2;  //go to ready enable state
        else  ns = s1;  //remain in WE state
    
    s2: if(x) ns = s3; //go to INIT state
        else  ns = s2; //remain in READY state
     
    s3: if(x) ns = s4;  // go to SEND State
        else  ns = s1;  // If error, go to WE state
    
    s4: if(x) ns = s5; // ACK/NAK
        else ns =  s1; // back to WE State
    
    s5: if(x) ns = ; // ACK, back to WE  state
        else ns =  ; // NAK, back to SEND state

    default ns = s0;
  endcase
 end
 
 always @ (posedge clk or posedge rst)
 begin
  if(rst) cs <= s0;
  else cs <= ns;
 end
 
 endmodule
